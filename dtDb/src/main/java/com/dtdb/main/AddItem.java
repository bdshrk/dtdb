/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dtdb.main;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;

/**
 *
 */
public class AddItem extends javax.swing.JInternalFrame {

    /**
     * Creates new form Edit
     */
    
    // declare variables for later use
    public String addCatalogue;
    public String addCategory;
    public String addProductName;
    public String addCurrentStock;
    public String addDesiredStock;
    public String addPricePerItem;
    //add category not needed
    public String addDateLastOrdered;
    public String addUrgency;
    //add catalogue not needed
    public String addPageNumber;
    public String addCode;
    public int addKey;
    
    public String errorMsg;
    
    public Boolean pricePoint = false;
    
    // regex for all numbers and lower and upper letters
    public Pattern alphaNumericPattern = Pattern.compile("[^a-zA-Z0-9 ]", Pattern.CASE_INSENSITIVE);
    
    public AddItem() throws IOException {
        initComponents();
        
        String dbLine;
        BufferedReader dbBR = null;
        
        // add custom categories
        
        ArrayList<String> dbCategoryList = new ArrayList<>();
        jCategoryCombo.removeAllItems();
        
        try {
            dbBR = new BufferedReader(new FileReader("H:/dtdb/db.csv"));
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbCategoryRow = dbLine.split(",");
                //System.out.println(Arrays.toString(dbCategoryRow));
                //System.out.println(dbCategoryRow[5]);
                if (dbCategoryList.contains(dbCategoryRow[5])) {
                    //System.out.println(dbCategoryRow[5]);
                } else {
                    dbCategoryList.add(dbCategoryRow[5]);
                    jCategoryCombo.addItem(dbCategoryRow[5]);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
        
        //add custom catalogues
        
        ArrayList<String> dbCatalogueList = new ArrayList<>();
        jCatalogueCombo.removeAllItems();
        
        try {
            dbBR = new BufferedReader(new FileReader("H:/dtdb/db.csv"));
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbCatalogueRow = dbLine.split(",");
                //System.out.println(Arrays.toString(dbCategoryRow));
                //System.out.println(dbCategoryRow[5]);
                if (dbCatalogueList.contains(dbCatalogueRow[8])) {
                    //System.out.println(dbCategoryRow[5]);
                } else {
                    dbCatalogueList.add(dbCatalogueRow[8]);
                    jCatalogueCombo.addItem(dbCatalogueRow[8]);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jConfirm = new javax.swing.JButton();
        jCancel = new javax.swing.JButton();
        jProductName = new javax.swing.JTextField();
        jCurrentStock = new javax.swing.JTextField();
        jLabelCStock = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jDesiredStock = new javax.swing.JTextField();
        jLabelDStock = new javax.swing.JLabel();
        jPricePerItem = new javax.swing.JTextField();
        jLabelPrice = new javax.swing.JLabel();
        jLabelPercentage = new javax.swing.JLabel();
        jLabelPound = new javax.swing.JLabel();
        jCatalogueCombo = new javax.swing.JComboBox<>();
        jLabelCatalogue = new javax.swing.JLabel();
        jUrgency = new javax.swing.JComboBox<>();
        jLabelUrgency = new javax.swing.JLabel();
        jLabelPage = new javax.swing.JLabel();
        jCataloguePageNumber = new javax.swing.JTextField();
        jLabelCategory = new javax.swing.JLabel();
        jCategoryCombo = new javax.swing.JComboBox<>();
        jDateLastOrdered = new javax.swing.JSpinner();
        jLabelDate = new javax.swing.JLabel();
        jLabelOr = new javax.swing.JLabel();
        jLabelOr2 = new javax.swing.JLabel();
        jCatalogueCustom = new javax.swing.JTextField();
        jCategoryCustom = new javax.swing.JTextField();
        jProductCode = new javax.swing.JTextField();
        jLabelCode = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setIconifiable(true);

        jConfirm.setText("Confirm");
        jConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmActionPerformed(evt);
            }
        });

        jCancel.setText("Cancel");
        jCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelActionPerformed(evt);
            }
        });

        jCurrentStock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCurrentStockFocusLost(evt);
            }
        });
        jCurrentStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCurrentStockKeyTyped(evt);
            }
        });

        jLabelCStock.setText("Current Stock");

        jLabelName.setText("Product Name/Description");

        jDesiredStock.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDesiredStockFocusLost(evt);
            }
        });
        jDesiredStock.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jDesiredStockKeyTyped(evt);
            }
        });

        jLabelDStock.setText("Desired Stock");

        jPricePerItem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPricePerItemKeyTyped(evt);
            }
        });

        jLabelPrice.setText("Price per Item");

        jLabelPercentage.setText("Stock Percentage: 0%");

        jLabelPound.setText("Â£");

        jCatalogueCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabelCatalogue.setText("Catalogue");

        jUrgency.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Low", "Medium", "High" }));

        jLabelUrgency.setText("Urgency");

        jLabelPage.setText("Catalogue Page Number");

        jCataloguePageNumber.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCataloguePageNumberFocusLost(evt);
            }
        });
        jCataloguePageNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCataloguePageNumberActionPerformed(evt);
            }
        });
        jCataloguePageNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCataloguePageNumberKeyTyped(evt);
            }
        });

        jLabelCategory.setText("Category");

        jCategoryCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jCategoryCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCategoryComboActionPerformed(evt);
            }
        });

        jDateLastOrdered.setModel(new javax.swing.SpinnerDateModel());

        jLabelDate.setText("Date Last Ordered (Optional)");

        jLabelOr.setText("Or");

        jLabelOr2.setText("Or");

        jLabelCode.setText("Product Code/ISBN");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jConfirm))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jProductName))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabelCode)
                        .addGap(18, 18, 18)
                        .addComponent(jProductCode))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCatalogue)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCatalogueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelOr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCatalogueCustom))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelDate)
                        .addGap(18, 18, 18)
                        .addComponent(jDateLastOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelUrgency)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelPrice)
                            .addComponent(jLabelCStock))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCurrentStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelDStock)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jDesiredStock, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelPound, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPricePerItem)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelPercentage))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCataloguePageNumber))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jUrgency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelOr2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCategoryCustom, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(jProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCatalogue)
                    .addComponent(jCatalogueCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelOr)
                    .addComponent(jCatalogueCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPage)
                    .addComponent(jCataloguePageNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jProductCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelCStock)
                    .addComponent(jCurrentStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDStock)
                    .addComponent(jDesiredStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPrice)
                    .addComponent(jPricePerItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPound, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPercentage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jDateLastOrdered, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCategoryCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCategory)
                    .addComponent(jLabelOr2)
                    .addComponent(jCategoryCustom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jUrgency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelUrgency))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jConfirm)
                    .addComponent(jCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCurrentStockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCurrentStockFocusLost
        addCalculatePercent();
    }//GEN-LAST:event_jCurrentStockFocusLost

    private void jCurrentStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCurrentStockKeyTyped
        // gets current key typed
        char addCurrentKey = evt.getKeyChar();
        
        // if key is NOT a digit, remove it
        if(!(Character.isDigit(addCurrentKey))){
            evt.consume();
        }

    }//GEN-LAST:event_jCurrentStockKeyTyped

    private void jDesiredStockFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDesiredStockFocusLost
        addCalculatePercent();
    }//GEN-LAST:event_jDesiredStockFocusLost

    private void jDesiredStockKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jDesiredStockKeyTyped
        // gets current key typed
        char addCurrentKey = evt.getKeyChar();
        
        // if key is not a digit, it is removed
        if(!(Character.isDigit(addCurrentKey))){
            evt.consume();
        }

    }//GEN-LAST:event_jDesiredStockKeyTyped

    // when a key is typed in price box
    // ensures 1 "." and only digits
    private void jPricePerItemKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPricePerItemKeyTyped
        // get char of key typed
        char addCurrentKey = evt.getKeyChar();
        // convert key to ascii code
        int addCurrentKeyInt = addCurrentKey;
        
        // if the textbox contains a ".", set pricepoint to true
        pricePoint = jPricePerItem.getText().contains(".");
        
        // if the key is not a digit
        if (!(Character.isDigit(addCurrentKey))) {
            // if the key is NOT a "."
            if (!(addCurrentKeyInt == 46)) {
                // delete the key
                evt.consume();
            }
            // check if the key typed is NOT a digit AND there is already a "."
            if (pricePoint) {
                // delete the character
                evt.consume();
            }
        }
        
        // if there is a "." in the textbox
        if (pricePoint) {
            // creates a substring of the current textbox that is cut off after and does not contain "."
            String tempString = jPricePerItem.getText().substring(jPricePerItem.getText().lastIndexOf(".") + 1);
            
            // if the number of digits after the "." is exactly 2
            if (tempString.length() == 2) {
                // delete the keystroke
                evt.consume();
            }
        }
    }//GEN-LAST:event_jPricePerItemKeyTyped

    private void jCataloguePageNumberFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCataloguePageNumberFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jCataloguePageNumberFocusLost

    // when key is typed in page number box
    // removes keystrokes that are not digits/integers
    private void jCataloguePageNumberKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCataloguePageNumberKeyTyped
        // get char of key typed
        char addCurrentKey = evt.getKeyChar();
        
        // check if the key typed is NOT a digit
        if (!(Character.isDigit(addCurrentKey))) {
            // delete the char before it is written to the textbox
            evt.consume();
        }
    }//GEN-LAST:event_jCataloguePageNumberKeyTyped

    private void jCataloguePageNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCataloguePageNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCataloguePageNumberActionPerformed
    
    // called when confirm button is pressed
    private void jConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmActionPerformed
        // clear error message
        errorMsg = "";
        
        try {
            // assign inputs to public variables
            copyInputs();
        } catch (IOException ex) {
            Logger.getLogger(AddItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // check if there was a error when validating, true is no, false if yes
        if (validateData()) {
            // if no error, write to csv
            writeToCSV();
        } else {
            // if there is an error, show dialogue box with error message
            JOptionPane.showMessageDialog(this, errorMsg, "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jConfirmActionPerformed

    private void jCategoryComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCategoryComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCategoryComboActionPerformed

    private void jCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jCancelActionPerformed

    // handles percentage calculation and colouring
    private void addCalculatePercent() {
        // if the text boxes are both not empty
        if (jDesiredStock.getText().length() != 0 && jCurrentStock.getText().length() != 0) {
            // gets values from input
            double addPercentCurrent = Integer.parseInt(jCurrentStock.getText());
            double addPercentDesired = Integer.parseInt(jDesiredStock.getText());
            // calculate percentage
            double addPercent = (addPercentCurrent / addPercentDesired);
            double addPercentDisp = addPercent * 100;
            
            // sets display text to percentage
            jLabelPercentage.setText("Stock Percentage: "+Math.round(addPercentDisp)+"%");
            // if more than 100%
            if (addPercentCurrent > addPercentDesired) {
                // this is green
                Color colourGreenDefault = new Color(0,255,0);
                // set colour to pure green
                jLabelPercentage.setForeground(colourGreenDefault);
            // if less than 100%
            } else {
                // calculate colours based on percentages
                int addColourGreen = (int) Math.round(addPercent*255);
                int addColourRed = (int) Math.round(255-(addPercent*255));
                // create colour
                Color customColour = new Color(addColourRed,addColourGreen,0);
                // add colour to text
                jLabelPercentage.setForeground(customColour);
            }
        // else set to 0%
        } else {
            jLabelPercentage.setText("Stock Percentage: "+"0"+"%");
        }
    }
    
    // copies inputs from input boxes to variables
    public void copyInputs() throws IOException {
        
        // if the catalogue box CUSTOM is empty
        if (jCatalogueCustom.getText().isEmpty()) {
            // use combobox value
            addCatalogue = (String) jCatalogueCombo.getSelectedItem();
        } else {
            // else use custom value
            addCatalogue = jCatalogueCustom.getText();
        }
        
        // if the category box CUSTOM is empty
        if (jCategoryCustom.getText().isEmpty()) {
            // use combobox value
            addCategory = (String) jCategoryCombo.getSelectedItem();
        } else {
            // else use custom value
            addCategory = jCategoryCustom.getText();
        }
        
        // set other variables
        addProductName = jProductName.getText();
        addCurrentStock = jCurrentStock.getText();
        addDesiredStock = jDesiredStock.getText();
        addPricePerItem = jPricePerItem.getText();
        //add category not needed
        addDateLastOrdered = new SimpleDateFormat("dd/MM/yyyy").format(jDateLastOrdered.getValue());
        addUrgency = (String) jUrgency.getSelectedItem();
        //add catalogue not needed
        addPageNumber = jCataloguePageNumber.getText();
        addCode = jProductCode.getText();
        // add key --> unique key
        addKey = calcNum();
        System.out.println(addKey);
    }
    
    //calculate key
    public int calcNum() throws IOException {
        String dbLine;
        BufferedReader dbBR = null;
        int value = 0;
        
        // reads the csv
        try {
            dbBR = new BufferedReader(new FileReader("H:/dtdb/db.csv"));
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbLineSplit = dbLine.split(",");
                // cant just add 1 to the number of lines as a line may be deleted
                if (Integer.parseInt(dbLineSplit[11]) >= value) {
                    // if the number is bigger than any other set it to value
                    value = Integer.parseInt(dbLineSplit[11]);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
        //add one for new line
        value += 1;
        //returns line number
        return value;
    }
    
    // validate all data function
    public Boolean validateData() {
        // calls each validation method individually
        validateName();
        validateNewCatalogue();
        validatePageNumber();
        validateProductCode();
        validateCurrentStock();
        validateDesiredStock();
        validatePrice();
        // date does not need to be validated as
        // it is handled in the input method
        validateNewCategory();
        // urgency does not need to be validated as it
        // is a combobox with set options
        
        // true if no errors
        // false if there are errors
        return errorMsg.isEmpty();
    }
    
    // validate product name
    public void validateName() {
        // convert to upper case to standardise the data
        addProductName.toUpperCase();
        
        // remove spaces from start and end if they exist
        addProductName.trim();
        
        // check if product name is empty
        if (addProductName.isEmpty()) {
            errorMsg += "The product name field is empty.\n";
        }
        
        // create temp string with illegal characters deleted
        String tempString = addProductName.replaceAll(alphaNumericPattern.pattern(), "");
        
        // check if the temp string and original string are different
        if (!addProductName.equals(tempString)) {
            errorMsg += "The product name field does not contain only alpha-numeric characters.\n";
        }
        
        // check if the product name is too short
        if (addProductName.length() <= 2) {
            errorMsg += "The product name field is too short.\n";
        }
    }
    
    // validate catalogue name
    public void validateNewCatalogue() {
        
        // if the catalogue is the same as the catalogue from the box
        // e.g. no new catalogue entered
        if (addCatalogue.equals((String) jCatalogueCombo.getSelectedItem())) {
            // no validation is required as the combo box is already validated
            // validation is skipped
        } else {
            // if a new catalogue needs to be validated
            
            // convert to upper case to standardise the data
            addCatalogue.toUpperCase();

            // remove spaces from start and end if they exist
            addCatalogue.trim();
            
            // create temp string with illegal characters deleted
            String tempString = addCatalogue.replaceAll(alphaNumericPattern.pattern(), "");

            // check if the temp string and original string are different
            if (!addCatalogue.equals(tempString)) {
                errorMsg += "The catalogue name field does not contain only alpha-numeric characters.\n";
            }
            
            // check if the catalogue name is too short
            if (addCatalogue.length() <= 2) {
                errorMsg += "The catalogue name field is too short.\n";
            }
        }
    }
    
    // validate category name
    public void validateNewCategory() {
        
        // if the category is the same as the category from the box
        // e.g. no new category entered
        if (addCategory.equals((String) jCategoryCombo.getSelectedItem())) {
            // no validation is required as the combo box is already validated
            // validation is skipped
        } else {
            // if a new category needs to be validated
            
            // convert to upper case to standardise the data
            addCategory.toUpperCase();

            // remove spaces from start and end if they exist
            addCategory.trim();
            
            // create temp string with illegal characters deleted
            String tempString = addCategory.replaceAll(alphaNumericPattern.pattern(), "");

            // check if the temp string and original string are different
            if (!addCategory.equals(tempString)) {
                errorMsg += "The category name field does not contain only alpha-numeric characters.\n";
            }
            
            // check if the category name is too short
            if (addCategory.length() <= 2) {
                errorMsg += "The category name field is too short.\n";
            }
        }
    }
    
    // validate page number
    public void validatePageNumber() {
        // remove spaces from start and end if they exist
        addPageNumber.trim();
        
        // check if the page number is empty
        if (addPageNumber.isEmpty()) {
            errorMsg += "The page number field is empty.\n";
        }
        
        // validation for illegal characters is handled in the keytyped event
    }
    
    // validate product code
    public void validateProductCode() {
        // remove spaces from start and end if they exist
        addCode.trim();
        
        // set code to capitials for standardisation
        addCode.toUpperCase();
        
        // check if the code is empty
        if (addCode.isEmpty()) {
            errorMsg += "The product code field is empty.\n";
        }
        
        // validation for illegal characters is handled in the keytyped event
    }
    
    // validate current stock
    public void validateCurrentStock() {
        // remove spaces from start and end if they exist
        addCurrentStock.trim();
        
        // check if the stock is empty
        if (addCurrentStock.isEmpty()) {
            errorMsg += "The current stock field is empty.\n";
        }
        
        // validation for illegal characters is handled in the keytyped event
    }
    
    // validate desired stock
    public void validateDesiredStock() {
        // remove spaces from start and end if they exist
        addDesiredStock.trim();
        
        // check if the stock is empty
        if (addDesiredStock.isEmpty()) {
            errorMsg += "The desired stock field is empty.\n";
        } else {
            // convert to integer if not empty
            int tempint = Integer.valueOf(addDesiredStock);
            
            // if integer value is 0
            if (tempint == 0) {
                errorMsg += "The desired stock field is 0.\n";
            }
        }
        
        // validation for illegal characters is handled in the keytyped event
    }
    
    // validate price
    public void validatePrice() {
        // remove spaces from start and end if they exist
        addPricePerItem.trim();
        
        
        // check if the price is empty
        if (addPricePerItem.isEmpty()) {
            errorMsg += "The price field is empty.\n";
        }
        
        // validation for illegal characters is handled in the keytyped event
    }
    
    
    public void writeToCSV() {
                
        String addRowJoined = "\n" + addProductName + "," + addCurrentStock + "," +
                addDesiredStock + ",," + addPricePerItem + "," + addCategory + "," +
                addDateLastOrdered + "," + addUrgency + "," + addCatalogue + "," + addPageNumber
                + "," + addCode + "," + addKey;
        try { 
            FileWriter addRowWriter = new FileWriter("H:/dtdb/db.csv",true);
            addRowWriter.append(addRowJoined);
            addRowWriter.close();
        } catch (IOException ex) {
            Logger.getLogger(AddItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //System.out.println(Menu.getWindows());
        //System.out.println(Menu.getWindows());
        
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jCancel;
    private javax.swing.JComboBox<String> jCatalogueCombo;
    private javax.swing.JTextField jCatalogueCustom;
    private javax.swing.JTextField jCataloguePageNumber;
    public static javax.swing.JComboBox<String> jCategoryCombo;
    private javax.swing.JTextField jCategoryCustom;
    private javax.swing.JButton jConfirm;
    private javax.swing.JTextField jCurrentStock;
    private javax.swing.JSpinner jDateLastOrdered;
    private javax.swing.JTextField jDesiredStock;
    private javax.swing.JLabel jLabelCStock;
    private javax.swing.JLabel jLabelCatalogue;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelCode;
    private javax.swing.JLabel jLabelDStock;
    private javax.swing.JLabel jLabelDate;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelOr;
    private javax.swing.JLabel jLabelOr2;
    private javax.swing.JLabel jLabelPage;
    private javax.swing.JLabel jLabelPercentage;
    private javax.swing.JLabel jLabelPound;
    private javax.swing.JLabel jLabelPrice;
    private javax.swing.JLabel jLabelUrgency;
    private javax.swing.JTextField jPricePerItem;
    private javax.swing.JTextField jProductCode;
    private javax.swing.JTextField jProductName;
    private javax.swing.JComboBox<String> jUrgency;
    // End of variables declaration//GEN-END:variables

}
