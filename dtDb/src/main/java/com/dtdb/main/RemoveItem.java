/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.dtdb.main;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.LineNumberReader;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;

/**
 *
 */
public class RemoveItem extends javax.swing.JInternalFrame {

    public String remCatalogue;
    public String remItem;
    public String remLastOrdered;
    public String remPageNumber;
    
    public TableModel importedTable;
    public int importedRow;
    
    /**
     * Creates new form RemoveItem
     * @param table
     * @param row
     * @throws java.io.IOException
     */
    
    public RemoveItem(TableModel table, int row) throws IOException {
        initComponents();
        
        jLabelRemoveText1.setVisible(false);
        jLabelRemoveText3.setVisible(false);
        jLabelRemoveText2.setVisible(false);
        jButtonDelete.setVisible(false);
        
        if (row == -1) {
            //not called from table
            importedRow = -1;
            populateComboBox();
        } else {
            importedRow = row;
            importedTable = table;
            populateComboBoxFromTable(table);
            jComboItemSelect.setSelectedIndex(importedRow);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelRemove = new javax.swing.JLabel();
        jComboItemSelect = new javax.swing.JComboBox<>();
        jLabelRemoveText1 = new javax.swing.JLabel();
        jButtonDelete = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();
        jLabelRemoveText3 = new javax.swing.JLabel();
        jLabelRemoveText2 = new javax.swing.JLabel();

        jLabelRemove.setText("Item to Remove:");

        jComboItemSelect.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboItemSelect.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboItemSelectItemStateChanged(evt);
            }
        });

        jLabelRemoveText1.setText("Test");

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });

        jLabelRemoveText3.setForeground(new java.awt.Color(255, 0, 0));
        jLabelRemoveText3.setText("Test");

        jLabelRemoveText2.setText("Test");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelRemoveText3)
                            .addComponent(jLabelRemoveText1)
                            .addComponent(jLabelRemoveText2))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboItemSelect, 0, 252, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelRemove)
                    .addComponent(jComboItemSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRemoveText1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelRemoveText2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabelRemoveText3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDelete)
                    .addComponent(jButtonCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboItemSelectItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboItemSelectItemStateChanged
        if (importedRow == -1) {
            try {
                remCatalogue = getValueFromDB(jComboItemSelect.getSelectedIndex() + 1, 8);
                remItem = getValueFromDB(jComboItemSelect.getSelectedIndex() + 1, 0);
                remLastOrdered = getValueFromDB(jComboItemSelect.getSelectedIndex() + 1, 6);
                remPageNumber = getValueFromDB(jComboItemSelect.getSelectedIndex() + 1, 9);

                jLabelRemoveText1.setText("This product is from the " + remCatalogue + " catalogue, page " + remPageNumber);
                jLabelRemoveText3.setText("Are you sure you want to delete item: " + remItem + "?");
                jLabelRemoveText2.setText(remItem + " was last ordered on " + remLastOrdered);
                jLabelRemoveText1.setVisible(true);
                jLabelRemoveText3.setVisible(true);
                jLabelRemoveText2.setVisible(true);
                jButtonDelete.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(RemoveItem.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                remCatalogue = getValueFromTable((String) jComboItemSelect.getSelectedItem(), 0);
                remItem = getValueFromTable((String) jComboItemSelect.getSelectedItem(), 0);
                remLastOrdered = getValueFromTable((String) jComboItemSelect.getSelectedItem(), 6);
                remPageNumber = getValueFromTable((String) jComboItemSelect.getSelectedItem(), 9);

                jLabelRemoveText1.setText("This product is from the " + remCatalogue + " catalogue, page " + remPageNumber);
                jLabelRemoveText3.setText("Are you sure you want to delete item: " + remItem + "?");
                jLabelRemoveText2.setText(remItem + " was last ordered on " + remLastOrdered);
                jLabelRemoveText1.setVisible(true);
                jLabelRemoveText3.setVisible(true);
                jLabelRemoveText2.setVisible(true);
                jButtonDelete.setVisible(true);
            } catch (IOException ex) {
                Logger.getLogger(RemoveItem.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jComboItemSelectItemStateChanged

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        int toDelete = jComboItemSelect.getSelectedIndex();
        
        String dbLine;
        LineNumberReader dbBR = null;
        String lineToDelete = "";
        
        try {
            dbBR = new LineNumberReader(new FileReader("H:/dtdb/db.csv")); //update this
            while ((dbLine = dbBR.readLine()) != null) {
                if ((dbBR.getLineNumber() - 1) == toDelete) {
                    lineToDelete = dbLine;
                } else {
                    System.out.println(dbBR.getLineNumber());
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(RemoveItem.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                try {
                    dbBR.close();
                } catch (IOException ex) {
                    Logger.getLogger(RemoveItem.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        //make new file and replace original:

        System.out.println(lineToDelete);

        try {
            Path pathTemp = Paths.get("H:/dtdb/db.csv");
            String tempContent = new String(Files.readAllBytes(pathTemp));
            tempContent = tempContent.replaceAll(lineToDelete + "\n", "");
            Files.write(pathTemp, tempContent.getBytes());
            this.dispose();
        } catch (IOException ex) {
            Logger.getLogger(RemoveItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    
    private void populateComboBox() throws IOException {
        String dbLine;
        BufferedReader dbBR = null;
        jComboItemSelect.removeAllItems();
        
        try {
            dbBR = new BufferedReader(new FileReader("H:/dtdb/db.csv")); //update this
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbRow = dbLine.split(",");
                jComboItemSelect.addItem(dbRow[0]);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
    }
    
    private String getValueFromDB(int lineNumber, int value) throws IOException {
        String dbLine;
        LineNumberReader dbBR = null;
        
        try {
            dbBR = new LineNumberReader(new FileReader("H:/dtdb/db.csv")); //update this
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbRow = dbLine.split(",");
                if (dbBR.getLineNumber() == lineNumber) {
                    return dbRow[value];
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
        return "ERROR";
    }
    
    private void populateComboBoxFromTable(TableModel table) {
        
        jComboItemSelect.removeAllItems();
        
        for (int i = 0; i < table.getRowCount(); i++) {
            jComboItemSelect.addItem((String) table.getValueAt(i, 0));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JComboBox<String> jComboItemSelect;
    private javax.swing.JLabel jLabelRemove;
    private javax.swing.JLabel jLabelRemoveText1;
    private javax.swing.JLabel jLabelRemoveText2;
    private javax.swing.JLabel jLabelRemoveText3;
    // End of variables declaration//GEN-END:variables

    private String getValueFromTable(String productName, int value) throws IOException {
        String dbLine;
        LineNumberReader dbBR = null;
        
        try {
            dbBR = new LineNumberReader(new FileReader("H:/dtdb/db.csv")); //update this
            while ((dbLine = dbBR.readLine()) != null) {
                String [] dbRow = dbLine.split(",");
                if (dbRow[0].equals(productName)) {
                    return dbRow[value];
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainProgram.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (dbBR != null) {
                dbBR.close();
            }
        }
        return "ERROR";
    }
}
